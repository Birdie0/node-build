#!/usr/bin/env bash

# Scrapes LTS/EOL schedule from https://github.com/nodejs/Release/blob/master/schedule.json
# Asserts that all definitions for a given version include the EOL or LTS Maintenance warning message,
# as appropriate.
# Prints status messages to STDERR
# Prints failing definition filenames to STDOUT

# Expects CWD to be share/node-build
# or to be given the directory as first arg.
#
# Pass --eol xor --maint to only check for those particular warnings.

set -euo pipefail
IFS=$'\n\t'

# shellcheck disable=2034 (variable indirection)
eol=1
# shellcheck disable=2034 (variable indirection)
lts=1

case "${1:-}" in
  --eol) unset lts; shift;;
  --maint|--lts) unset eol; shift;;
esac

dir=${1:-share/node-build}

schedule_json() {
  curl -qsSfJL https://raw.githubusercontent.com/nodejs/Release/master/schedule.json
}

# Flattens the LTS schedule.json into bash variables:
# eg:
#   v4_start="2015-09-08"
#   v4_lts="2015-10-12"
#   v4_maintenance="2017-04-01"
#   v4_end="2018-04-30"
#   v4_codename="Argon"
# and creates a 'versions' array of the versions to check.
# The output should be eval'd to make the variables available to this script.
parse_json() {
  awk '
  /"v[[:digit:]]+":/ {
    gsub(/[^[:digit:].]/, "")
    version = $0
    print "versions+=(" version ")"
    next
  }

  /".*":/ && version {
    gsub(/[ "]/, "")
    gsub(/,$/, "")
    split($0, v, /:/)

    print "v" version "_" v[1] "=\"" v[2] "\""
    next
  }

  /}/ {
    version = 0
    next
  }
'
}

past() {
  [[ "$1" < "$(date -u +'%F')" ]]
}

assert_message() {
  local msg=$1
  local v=$2
  local files_missing_messages

  if [ -z "${!msg-}" ]; then return; fi

  echo "asserting $msg message for v$v" >&2

  files_missing_messages="$(grep -e "warn_$msg" --files-without-match "${dir%/}/$v".*)"

  test -z "$files_missing_messages" || { echo "v$v nodes missing $msg message:" >&2; echo "$files_missing_messages"; return 1; }
}

assert_warnings() {
  local version=$1
  local maint_date=$2
  local eol_date=$3

  if past "$eol_date"; then assert_message eol "$version"
  elif past "$maint_date"; then assert_message lts "$version"
  fi
}

declare -a versions
eval "$(schedule_json | parse_json)"

status=0

for version in "${versions[@]}"; do
  maint_date="v${version}_maintenance"
  eol_date="v${version}_end"

  echo "v$version maint: ${!maint_date} eol: ${!eol_date}" >&2
  assert_warnings "$version" "${!maint_date}" "${!eol_date}" || status=$?
done

exit $status
